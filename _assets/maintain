#!/bin/bash

# purpose of this script: execute maintenance tasks around fylr:
#
# - save consistent copy of sql ("dump")
# - cleanup superfluous docker files
# - update fylr and postgres (but not major version jump)

# requires: docker, docker compose plugin

usage(){
cat<<EOF
Maintain fylr installation in $BASEDIR, with docker compose.

/srv/fylr/maintain fylr-recreate # remove flyr container and recreate it, to reload conf
/srv/fylr/maintain recreate-fylr # dito
/srv/fylr/maintain fylr-reload   # dito
/srv/fylr/maintain fylr-reload-config # dito
/srv/fylr/maintain fylr-restart  # dito
/srv/fylr/maintain restart-fylr  # dito
/srv/fylr/maintain witness       # dito, plus follow logs (Ctrl+C to stop following)

/srv/fylr/maintain update-fylr   # pull fylr container image. Then does fylr-recreate
/srv/fylr/maintain fylr-update   # dito

/srv/fylr/maintain update        # check for updates, (re)create containers as needed
/srv/fylr/maintain start         # dito

/srv/fylr/maintain stop          # stops fylr via docker compose
                                 # DANGER: stop will be in effect even after reboot.
                                 # Do not forget to start again.

/srv/fylr/maintain restart       # stop and start

/srv/fylr/maintain backup        # dumps sql into ${BASEDIR}/sqlbackups
                                 # is also part of update and update-auto
                                 # DANGER: deletes old backups until $KEEPDBS are left

/srv/fylr/maintain cleanup       # remove old files, e.g. container images
EOF
}

### DEFAULTS

# Data directory with the subdirectories "conf" etc.:
BASEDIR=/srv/fylr
BACKUPDIR="$BASEDIR"/sqlbackups
# Space-separated list of names of dbs in postgresql in container to dump:
DBS="fylr"
# Of eas DB in $DBS keep this many newest dumps:
KEEPDBS=7
# Where to write log messages to while doing update-auto:
MYLOG=/var/log/fylr-maintain.log

## read LOCAL CONFIG:
[ -e /etc/default/fylr ] && . /etc/default/fylr

log(){
    echo "`date +%Y-%m-%d_%Hh%Mm%Ss` $@" >>"$MYLOG"
}

log_container_versions(){
    log "$@"
    docker ps     >>"$MYLOG"
    docker images >>"$MYLOG"
}

error(){ # send output to stderr and logfile in one call
    echo "ERROR: $@" >&2
    log  "ERROR: $@"
}

errorexit(){ # exit with non-zero status AND send output to stderr and logfile in one call
    error "$@, ABORTED"
    exit 1
}

cleanup_docker(){
    #  free disk space
    #
    #  In our experience, used containers are not damaged by these commands
    #  and used images are not damaged even if they have no running container.
    #  Some error messages may be generated, however ("could not remove").

    log "removing left over temporary files..."
    LIST=$(docker ps -qa --no-trunc --filter "status=exited")
    if [ "$LIST" ] ; then
        docker rm -v $LIST >>"$MYLOG"
        log "... done."
    else
        log "... none found."
    fi

    log "removing unused images..."
    LIST=$(docker images --filter "dangling=true" -q --no-trunc)
    if [ "$LIST" ] ; then
        docker rmi $LIST >>"$MYLOG"
        log "... done."
    else
        log "... none found."
    fi

    # next step:
    # docker images | grep '<none>' | awk '{print }' | xargs -r docker rmi -f

    log "removing dangling volumes..."
    LIST=$(docker volume ls -qf dangling=true)
    if [ "$LIST" ] ; then
        docker volume rm $LIST >>"$MYLOG"
        log "... done."
    else
        log "... none found."
    fi
    log All done cleaning up.
}

requires(){
    type -a "$1" &>/dev/null || errorexit "required program not installed or not in PATH: $1"
}

requires docker

### PARSE ARGUMENTS

log "___called with $@"

case "$1" in
pull)
    cd "$BASEDIR"
    docker compose pull
    ;;
update-fylr|fylr-update)
    cd "$BASEDIR"
    docker compose pull fylr
    docker compose up --force-recreate --no-deps -d fylr
    ;;
recreate-fylr|fylr-recreate|fylr-reload|fylr-reload-config|fylr-restart|restart-fylr)
    cd "$BASEDIR"
    docker compose up --force-recreate --no-deps -d fylr
    ;;
witness)
    cd "$BASEDIR"
    docker compose up --force-recreate --no-deps -d fylr
    docker compose logs --tail all -f fylr
    ;;
start|update)
    set -e
    cd "$BASEDIR"
    log_container_versions "before up"
    docker compose pull -q          &>>"$MYLOG" || error "pull failed, see $MYLOG"
    docker compose up -d --no-color &>>"$MYLOG" || error "update failed, see $MYLOG"
    log_container_versions "after up"
    ;;
stop)
    set -e
    cd "$BASEDIR"
    docker compose down
;;
restart)
    $0 stop 2>&1 | sed '/Network .* not found/d'
    $0 start
;;
backup)
    # do sql backup of all sql dbs $DBS
    log "starting sql dumps"
    # WARNING: there are only $KEEPDBS kept - repeating this quickly removes all old backups (on this host) !
    docker ps|grep -q 'postgresql$' || errorexit "no container named postgresql, cannot backup"
    for DB in $DBS; do
            $0 sqldump $DB          || errorexit "sqldump db '$DB' failed"
    done
    log "finished sql dumps"
    exit 0
    ;;
sqldump)
    # do sql backup of one given sql db name (inside docker container "postgresql")
    cd "$BACKUPDIR"                 || errorexit "could not change into directory '$BACKUPDIR'"
    DB="$2"
    TIME=`date +%Y-%m-%d_%Hh%Mm%Ss`
    FILE=$DB."$TIME".pgdump
    docker exec postgresql pg_dump -U fylr -v -Fc -f /mnt/${FILE}.unfinished $DB > $FILE.log 2>&1
    EXCODE=$?
    if [ $EXCODE -gt 0 ] ; then
        # FAIL. cleanup and notify
        rm ${FILE}.unfinished &>/dev/null
        mv $FILE.log  $FILE.log.FAIL &>/dev/null
        errorexit "pg_dump $DB exited with $EXCODE. Logfile is $BASEDIR/sqlbackups/$FILE.log.FAIL"
    else
        # SUCCEEDED.
        mv ${FILE}.unfinished $FILE
        # rotate so that only the last $KEEPDBS valid dumps remain. Also for logs.
        ls -1 --color=no $DB.*s.pgdump    |sort -r|tail -n +$((KEEPDBS+1))|while read i; do rm $i; done
        ls -1 --color=no $DB.*s.pgdump.log|sort -r|tail -n +$((KEEPDBS+1))|while read i; do rm $i; done
    fi
    exit 0
    ;;
cleanup)
    cleanup_docker 2>&1|grep -v 'image is being used'
    ;;
help|h|-h|--help|-help)
    usage
    ;;
*)
    echo "ERROR: argument '$1' not implemented. Try help"
    echo
    usage
    exit 2
    ;;
esac

